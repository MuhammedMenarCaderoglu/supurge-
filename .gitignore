import time

class SmartVacuumCleaner:
    def __init__(self):
        self.living_room_cleanliness = 0
        self.bedroom_cleanliness = 0
        self.movement_log = []
        self.speaker = "Smart Vacuum: "
        self.battery = 100  # 100% initially

    def clean_room(self, room_name, kid_mess):
        if room_name == 'Living Room':
            self.living_room_cleanliness += kid_mess
        elif room_name == 'Bedroom':
            self.bedroom_cleanliness += kid_mess
        else:
            print(f"{self.speaker}Invalid room name")

        self.movement_log.append(f"{self.speaker}Cleaned {kid_mess} mess in {room_name}")

    def recharge(self):
        self.battery = 100  # Recharge the battery to 100%
        self.movement_log.append(f"{self.speaker}Recharged the battery")

    def report_results(self):
        print(f"{self.speaker}Living Room cleanliness:", self.living_room_cleanliness)
        print(f"{self.speaker}Bedroom cleanliness:", self.bedroom_cleanliness)
        print(f"{self.speaker}Battery level:", self.battery, "%")
        print(f"{self.speaker}Movement Log:")
        for movement in self.movement_log:
            print(movement)

vacuum = SmartVacuumCleaner()
cleaning_start_time = time.time()  # Get the current time

# Initial report
vacuum.report_results()

while True:
    # Calculate the elapsed time in seconds
    elapsed_time_seconds = time.time() - cleaning_start_time

    if vacuum.battery <= 10:
        vacuum.recharge()

    if elapsed_time_seconds >= 5:
        # Kid makes a mess in either the Living Room or Bedroom
        vacuum.clean_room('Living Room', 5)  # Kid K makes a mess of 5 in the Living Room
        vacuum.clean_room('Bedroom', 3)  # Kid K makes a mess of 3 in the Bedroom

        # Vacuum cleaner continues to clean
        vacuum.battery -= 2  # Simulate battery usage during cleaning

        # Report the results periodically
        vacuum.report_results()
        cleaning_start_time = time.time()  # Reset the start time for the break

    time.sleep(1)  # Simulate cleaning time and delay
